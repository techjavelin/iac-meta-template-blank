---
name: pr // plan

on:
  pull_request:
    types:
      - opened
      - synchronize
    branches:
      - main

jobs:
  attach_plan:
    name: pr // attach
    runs-on: ubuntu-latest

    needs: plan

    steps:
      - name: pr // generate // checkout
        uses: actions/checkout@v3

      - name: pr // plan // validate
        id: validate
        uses: techjavelin/iac-action-terraform-validate
        with:
          terraform-dir: terraform

      - name: pr // plan // generate
        id: plan
        uses: iac-action-terraform-prepare
        with:
          source-dir: terraform

      - name: pr // plan // attach
        uses: actions/github-script@v6
        env:
          PLAN: "terraform\n${{ steps.plan.outputs.plan }}"
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            // 1. Retrieve existing bot comments for the PR
            const { data: comments } = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
            })
            const botComment = comments.find(comment => {
              return comment.user.type === 'Bot' && comment.body.includes('Terraform Format and Style')
            })

            // 2. Prepare format of the comment
            const output = `#### Terraform Format and Style 🖌\`${{ steps.validate.outputs.format }}\`
            #### Terraform Initialization ⚙️\`${{ steps.validate.outputs.init }}\`
            #### Terraform Validation 🤖\`${{ steps.validate.outputs.validate }}\`
            <details><summary>Validation Output</summary>

            \`\`\`\n
            ${{ steps.plan.outputs.details }}
            \`\`\`

            </details>

            #### Terraform Plan 📖\`${{ steps.plan.outputs.result }}\`

            <details><summary>Show Plan</summary>

            \`\`\`\n
            ${process.env.PLAN}
            \`\`\`

            </details>

            *Pusher: @${{ github.actor }}, Action: \`${{ github.event_name }}\`, Working Directory: \`${{ env.tf_actions_working_dir }}\`, Workflow: \`${{ github.workflow }}\`*`;

            // 3. If we have a comment, update it, otherwise create a new one

            console.log(output);

            if (botComment) {
              github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: botComment.id,
                body: output
              })
            } else {
              github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: output
              })
            }

  ansible_diff:
    name: pr // ansible
    runs-on: ubuntu-latest

    env:
      ANSIBLE_TF_DIR: terraform
      # If you use Terraform Cloud or Workspaces, uncomment this to set the workspace name for
      # the dynamic inventory scripts
      # ANSIBLE_TF_WS_NAME:

      # If you've installed modules and need to run ansible-galaxy prior to running ansible,
      # change this to true
      INIT_REQUIREMENTS: false

      # If you're using an ansible vault, set USE_VAULT to true and make sure you have a
      # secret named ANSIBLE_VAULT_PASSWORD
      USE_VAULT: false

    steps:
      - name: pr // ansible // checkout
        uses: actions/checkout@v3

      - name: pr // ansible // setup-python
        uses: actions/setup-python@v4
        with:
          python-version: "3.10"

      - name: pr // ansible // init
        run: pip install -r init-requirements.txt

      - name: pr // ansible // pipenv
        run: pipenv install

      - name: pr // ansible // terraform-setup
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_wrapper: false

      - name: pr // ansible // terraform-init
        id: terraform-init
        run: terraform init
        working-directory: terraform

      - name: pr // ansible // install-requirements
        if: ${{ env.INIT_REQUIREMENTS == true }}
        run: |
          pipenv run ansible-galaxy install -r ansible/requirements.yml

      - name: pr // ansible // setup-vault
        if: ${{ env.USE_VAULT == true }}
        run: |
          echo ${{ env.ANSIBLE_VAULT_PASSWORD }} > /tmp/.ansible_vault_password
          echo "--vault-password-file /tmp/" >> $GITHUB_OUTPUT

      - name: pr // ansible // dry-run
        run: |
          export ANSIBLE_TF_BIN=$(which terraform)
          pipenv run ansible-playbook --inventory ansible/inventory/terraform-inventory\terraform.py --inventory ansible/inventory/static --check --diff ${{ env.ANSIBLE_EXTRA_ARGS }} ansible/main.yml
